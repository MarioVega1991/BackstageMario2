app:
  title: Babel App
  baseUrl: http://localhost:3000

organization:
  name: Babel

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    # config options: https://node-postgres.com/apis/client
    client: better-sqlite3
    connection: ':memory:'
    #client: pg
    #connection:
     # user: ${POSTGRES_USER}
      #password: ${POSTGRES_PASSWORD}
      #port: ${POSTGRES_PORT}
      #host: ${POSTGRES_HOST}
      # https://node-postgres.com/features/ssl
      # ssl: require # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
        #ca: # if you have a CA file and want to verify it you can uncomment this section
        #$file: <file-path>/ca/server.crt
integrations:
  github:
    - host: github.com
      token: Z2hwX2hiWUptejlBWGk5cEJrRG54Q0RWcE1oaFBUcGhxaTNIVjN4OQ==
      repos:
        - owner: MarioVega1991
          name: BackstageMario2
          baseUrl: https://github.com/MarioVega1991/BackstageMario2
#    - host: github.com
#      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
#      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
#      token: 'Z2hwX2hiWUptejlBWGk5cEJrRG54Q0RWcE1oaFBUcGhxaTNIVjN4OQ=='
    
#    - host: github.com
#      rawBaseUrl: https://github.com/MarioVega1991/BackstageMario2
#      token: 'Z2hwX2hiWUptejlBWGk5cEJrRG54Q0RWcE1oaFBUcGhxaTNIVjN4OQ=='

    

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true
# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  publisher:
    type: 'local'
  generator:
    runIn: 'docker' #'docker' # Alternatives - 'local'
    #type: 'azureBlobStorage' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    #azureBlobStorage:
    # containerName: 'container-backstagepoc'
    #  credentials:
    #    accountName: 'csb1003200283316de5'
    #    accountKey: ${TECHDOCS_AZURE_BLOB_STORAGE_ACCOUNT_KEY}
auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  #environment: development
  providers:
   # github:
      #development:
        #clientId: 6141db6493a3cc0451c5
        #clientSecret: 19a26cbf4789223aeb7fe952aba8e40c13679be2

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    name: Mario. V. V. # Defaults to `Scaffolder`
    email: mario.vegara@babelgroup.com # Defaults to `scaffolder@backstage.io`
  defaultCommitMessage: "Another commit scaffolded" # Defaults to 'Initial commit'

catalog:
  rules:
    - allow: [Component, API, Location, Template]
  providers:
    github:
      # the provider ID can be any camelCase string
      providerId:
        organization: 'MarioVega1991/BackstageMario2' # string
        catalogPath: '/catalog-info.yaml' # string
        filters:
          branch: 'main' # string
          repository: '.*' # Regex
        schedule: # optional; same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 30 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
      customProviderId:
        organization: 'MarioVega1991/BackstageMario2' # string
        catalogPath: '/custom/path/catalog-info.yaml' # string
        filters: # optional filters
          branch: 'develop' # optional string
          repository: '.*' # optional Regex
      wildcardProviderId:
        organization: 'MarioVega1991/BackstageMario2' # string
        catalogPath: '/groups/**/*.yaml' # this will search all folders for files that end in .yaml
        filters: # optional filters
          branch: 'develop' # optional string
          repository: '.*' # optional Regex
      topicProviderId:
        organization: 'MarioVega1991/BackstageMario2' # string
        catalogPath: '/catalog-info.yaml' # string
        filters:
          branch: 'main' # string
          repository: '.*' # Regex
          topic:
            include:
              - 'backstage-exclude'
      topicFilterProviderId:
        organization: 'MarioVega1991/BackstageMario2' # string
        catalogPath: '/catalog-info.yaml' # string
        filters:
          branch: 'main' # string
          repository: '.*' # Regex
          topic:
            include: ['backstage-include'] # optional array of strings
            exclude: ['experiments'] # optional array of strings
      validateLocationsExist:
        organization: 'MarioVega1991/BackstageMario2' # string
        catalogPath: '/catalog-info.yaml' # string
        filters:
          branch: 'main' # string
          repository: '.*' # Regex
        validateLocationsExist: true # optional boolean
      visibilityProviderId:
        organization: 'MarioVega1991/BackstageMario2' # string
        catalogPath: '/catalog-info.yaml' # string
        filters:
          visibility:
            - public
            - internal
      enterpriseProviderId:
        host: github.com
        organization: 'MarioVega1991/BackstageMario2' # string
        catalogPath: '/catalog-info.yaml' # string
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  locations:
    # Local example organizational data

    - type: url
      target: https://github.com/MarioVega1991/BackstageMario2/blob/main/catalog-model/artist-lookup-component.yaml
    #- type: file
      #target: ../../catalog-model/artist-lookup-component.yaml

    - type: file
      target: ../../catalog-model/my-template.yaml

    - type: file
      target: ../../catalog-model/m-template.yaml
    
    - type: file
      target: ../../catalog-model/doc-template.yaml
    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
